syntax = "proto3";
package Api.Sibur.University;

import "google/api/annotations.proto";

// Студент, которой учится в университете
message Student {
    // Уникальный идентификатор студента
    Id id = 1;

    // Данные о студенте
    Data data = 2;

    // Идентификатор группы в которой обучается студент
    Group.Id group = 3;

    // Уникальный идентификатор студента
    message Id {
        // Номер студента
        uint64 id = 1;
    }

    // Данные о студенте
    message Data {
        // ФИО студента
        string full_name = 1;

        // Дата рождения студента
        Structures.Timestamp birthday = 2;
    }
}

// Сервис для управления студентами
service StudentService {
    rpc get (StudentPacket.GetRequest) returns (StudentPacket.GetResponse) {
        option (google.api.http) = {
            post: "/student/get"
            body: "*"
        };
    }

    rpc create (StudentPacket.CreateRequest) returns (StudentPacket.CreateResponse) {
        option (google.api.http) = {
            post: "/student/create"
            body: "*"
        };
    }

    rpc update (StudentPacket.UpdateRequest) returns (StudentPacket.UpdateResponse) {
        option (google.api.http) = {
            post: "/student/update"
            body: "*"
        };
    }

    rpc delete (StudentPacket.DeleteRequest) returns (StudentPacket.DeleteResponse) {
        option (google.api.http) = {
            post: "/student/update"
            body: "*"
        };
    }

    // Включить студента в определенную группу
    rpc setGroup (StudentPacket.SetGroupRequest) returns (StudentPacket.SetGroupResponse) {
        option (google.api.http) = {
            post: "/student/set-group"
            body: "*"
        };
    }
}

message StudentPacket {
    message GetRequest {
        repeated Scope scope = 2;
        uint64 offset = 3;
        uint64 length = 4;

        message Scope {
            oneof condition {
                ById by_id = 1;
                LikeFullName like_full_name = 2;
            }

            message ById {
                repeated Student.Id id = 1;
            }

            message LikeFullName {
                string full_name = 1;
            }
        }
    }

    message GetResponse {
        oneof result {
            Batch batch = 1;
            Error error = 2;
        }

        enum Error {
            INTERNAL_ERROR = 0;
            FORBIDDEN = 1;
            INVALID_SCOPE_CONDITION = 2;
        }

        message Batch {
            repeated Student student = 1;
        }
    }

    message CreateRequest {
        Student.Data student_data = 2;
    }

    message CreateResponse {
        oneof result {
            Student student = 1;
            Error error = 2;
        }

        enum Error {
            INTERNAL_ERROR = 0;
            FORBIDDEN = 1;
            INVALID_NAME = 2;
            INVALID_BIRTHDAY = 3;
        }
    }

    message UpdateRequest {
        Student.Id student_id = 2;
        Student.Data student_data = 3;
    }

    message UpdateResponse {
        oneof result {
            Student student = 1;
            Error error = 2;
        }

        enum Error {
            INTERNAL_ERROR = 0;
            FORBIDDEN = 1;
            STUDENT_NOT_FOUND = 2;
            INVALID_NAME = 3;
            INVALID_BIRTHDAY = 4;
        }
    }

    message DeleteRequest {
        Student.Id student_id = 2;
    }

    message DeleteResponse {
        oneof result {
            Status status = 1;
            Error error = 2;
        }

        enum Status {
            REMOVED = 0;
        }

        enum Error {
            INTERNAL_ERROR = 0;
            FORBIDDEN = 1;
            STUDENT_NOT_FOUND = 2;
            REMOVAL_IMPOSSIBLE = 3;
        }
    }

    message SetGroupRequest {
        Student.Id student = 2;
        Group.Id group = 3;
    }

    message SetGroupResponse {
        oneof result {
            Student student = 1;
            Error error = 2;
        }

        enum Error {
            INTERNAL_ERROR = 0;
            FORBIDDEN = 1;
            STUDENT_NOT_FOUND = 2;
            GROUP_NOT_FOUND = 3;
        }
    }
}

// Группа в которой учатся студенты
message Group {
    // Уникальный идентификатор группы
    Id id = 1;

    // Название группы
    string name = 2;

    // Студенты, которые обучаются в группе
    repeated Student.Id student = 3;

    // Уникальный идентификатор группы
    message Id {
        // Номер группы
        uint64 number = 1;
    }
}

// Сервис для управления группами
service GroupService {
    rpc get (GroupPacket.GetRequest) returns (GroupPacket.GetResponse) {
        option (google.api.http) = {
            post: "/group/get"
            body: "*"
        };
    }
}

message GroupPacket {
    message GetRequest {
        repeated Scope scope = 2;
        uint64 offset = 3;
        uint64 length = 4;

        message Scope {
            oneof condition {
                ById by_id = 1;
                LikeName like_name = 2;
            }

            message ById {
                repeated Group.Id id = 1;
            }

            message LikeName {
                string name = 1;
            }
        }
    }

    message GetResponse {
        oneof result {
            Batch batch = 1;
            Error error = 2;
        }

        enum Error {
            INTERNAL_ERROR = 0;
            FORBIDDEN = 1;
            INVALID_SCOPE_CONDITION = 2;
        }

        message Batch {
            repeated Group group = 1;
        }
    }
}

message Structures {
    // Описания момента во времени. Определяется как количество милисекунд,
    // прошедших с полуночи (00:00:00 UTC) 1 января 1970 года (четверг)
    message Timestamp {
        // количество милисекунд, прошедших c 00:00:00 UTC 01.01.1970
        int64 milliseconds = 1;
    }
}